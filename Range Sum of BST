/** Solution to the problem found in: https://leetcode.com/problems/range-sum-of-bst/ 
*
* Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).
* The binary search tree is guaranteed to have unique values.
**/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:

    void recursiveSearch(TreeNode* r, const int& L, const int&R, int& sum){
        if(r == NULL){
            return;
        }
        
        // if the current value is >= than the min and <= than the max, we must add it to our total
        if(r->val  >= L && r->val <= R){
            sum += r->val;
        }
                
        // Iterate through the tree in order
        if(r->val > L){
            recursiveSearch(r->left,L,R,sum);   
        }
        if(r->val < R){
           recursiveSearch(r->right,L,R,sum);
        }
    }
    
    int rangeSumBST(TreeNode* root, int L, int R) {
        int sum = 0;
        recursiveSearch(root,L,R,sum);
        return sum;
    }
};
